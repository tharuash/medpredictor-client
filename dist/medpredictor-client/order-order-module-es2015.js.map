{"version":3,"sources":["./src/app/order/components/dashboard/dashboard.component.html","./src/app/order/components/history/history.component.html","./src/app/order/components/dashboard/dashboard.component.css","./src/app/order/components/dashboard/dashboard.component.ts","./src/app/order/components/history/history.component.css","./src/app/order/components/history/history.component.ts","./src/app/order/order-routing.module.ts","./src/app/order/order.module.ts","./src/app/services/prediction.service.ts"],"names":[],"mappings":"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","file":"order-order-module-es2015.js","sourcesContent":["export default \"<div id=\\\"NextOrder\\\" class=\\\"tabcontent\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-8 col-12 p-2 align-self-center\\\">\\n        <form [formGroup]=\\\"predictForm\\\" (submit)=\\\"predict()\\\">\\n            <label for=\\\"medicine\\\">Medicine</label>\\n            <select id=\\\"medicine\\\" name=\\\"medicine\\\" formControlName=\\\"medicine\\\" required>\\n              <option value=\\\"adorastatin\\\">Adorastatin 10mg</option>\\n              <option value=\\\"metformin\\\">Metfromin 500mg</option>\\n              <option value=\\\"losatank\\\">Lostan Potasium 50mg</option>\\n              <option value=\\\"aspirin\\\">Aspirin 75mg</option>\\n              <option value=\\\"niffidipine\\\">Niffidipine 20er</option>\\n            </select>\\n\\n            <label for=\\\"year\\\">Year</label>\\n            <input type=\\\"number\\\" name=\\\"year\\\" min=\\\"2015\\\" value=\\\"2021\\\" style=\\\"background: #ccc\\\" formControlName=\\\"year\\\" required />\\n\\n            <label for=\\\"month\\\">Month</label>\\n            <select id=\\\"month\\\" name=\\\"month\\\" formControlName=\\\"month\\\" required>\\n              <option value=\\\"1\\\">January</option>\\n              <option value=\\\"2\\\">February</option>\\n              <option value=\\\"3\\\">March</option>\\n              <option value=\\\"4\\\">April</option>\\n              <option value=\\\"5\\\">May</option>\\n              <option value=\\\"6\\\">June</option>\\n              <option value=\\\"7\\\">July</option>\\n              <option value=\\\"8\\\">August</option>\\n              <option value=\\\"9\\\">September</option>\\n              <option value=\\\"10\\\">October</option>\\n              <option value=\\\"11\\\">November</option>\\n              <option value=\\\"12\\\">December</option>\\n            </select>\\n\\n\\n            <h3 style=\\\"margin-top: 50px\\\">Be prepared for</h3>\\n            <div class=\\\"pl-5\\\">\\n\\n              <div class=\\\"radio\\\">\\n                <label><input type=\\\"radio\\\" name=\\\"option\\\" value=\\\"a\\\" formControlName=\\\"option\\\" checked>&nbsp;&nbsp;without any conditions</label>\\n              </div>\\n              <div class=\\\"radio disabled\\\">\\n                <label><input type=\\\"radio\\\" name=\\\"option\\\" value=\\\"b\\\" formControlName=\\\"option\\\">&nbsp;with current covid-19 situation</label>\\n              </div>\\n\\n            </div>\\n            <button type=\\\"submit\\\" class=\\\"bg-warning\\\">GET QUANTITY</button>\\n\\n          </form>\\n    </div>\\n    <div class=\\\"col-lg-4 col-12 align-self-center pl-5\\\">\\n      <div class=\\\"text-right\\\">\\n        <div class=\\\"text1\\\" *ngIf=\\\"predictedValue\\\">You should Order</div>\\n        <div class=\\\"text1\\\" *ngIf=\\\"!predictedValue\\\">Select Medicine and A Time</div>\\n        <div class=\\\"text2\\\" *ngIf=\\\"predictedValue\\\">{{predictedValue}} Boxes/Packs</div>\\n        <div class=\\\"text1\\\" *ngIf=\\\"!predictedValue\\\">To Get Predictions</div>\\n        <div class=\\\"text_a\\\">\\n          <button class=\\\"btn btn-primary w-50\\\" *ngIf=\\\"predictedValue\\\" (click)=\\\"seeWhy()\\\">see why>></button>\\n        </div>\\n\\n\\n      </div>\\n    </div>\\n\\n  </div>\\n\"","export default \"<div id=\\\"NextOrder\\\">\\n  <div class=\\\"row\\\">\\n    <form class=\\\"w-100\\\" [formGroup]=\\\"searchForm\\\" (submit)=\\\"search()\\\">\\n      <div class=\\\"form-group row\\\">\\n        <div class=\\\"col-sm-10\\\">\\n          <select id=\\\"medicine\\\" name=\\\"medicine\\\" formControlName=\\\"medicine\\\" class=\\\"form-control\\\" required>\\n            <option value=\\\"adorastatin\\\" selected>Adorastatin 10mg</option>\\n            <option value=\\\"metfromin\\\">Metfromin 500mg</option>\\n            <option value=\\\"lostan_potasium\\\">Lostan Potasium 50mg</option>\\n            <option value=\\\"aspirin\\\">Aspirin 75mg</option>\\n            <option value=\\\"niffidipine\\\">Niffidipine 20er</option>\\n          </select>\\n        </div>\\n        <div class=\\\"col-sm-2\\\">\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Search</button>\\n        </div>\\n      </div>\\n    </form>\\n    <div class=\\\"col-lg-6 col-12 p-2\\\">\\n      <div class=\\\"card\\\" style=\\\"color: black; margin: 8px\\\" *ngFor=\\\"let order of orderColumnOne\\\">\\n        <div class=\\\"card-header\\\">\\n          Order {{order.orderId}} {{order.medicine}}\\n        </div>\\n        <div class=\\\"card-body\\\">\\n          <!--h5 class=\\\"card-title\\\">Special title treatment</h5-->\\n          <p class=\\\"card-text\\\">Year : {{order.year}} <span style=\\\"float: right\\\">Month : {{months[order.month - 1]}}</span> </p>\\n          <p class=\\\"card-text\\\">Quantity : {{order.quantity}} packs <span style=\\\"color: blue\\\" *ngIf=\\\"order.isPredicted\\\">(A predicted value)</span><span style=\\\"color: red\\\" *ngIf=\\\"!order.isPredicted\\\">(A custom value)</span></p>\\n          <p class=\\\"card-text\\\" *ngIf=\\\"order.notes\\\">Notes : {{order.notes}} </p>\\n        </div>\\n      </div>\\n\\n\\n    </div>\\n    <div class=\\\"col-lg-6 col-12 p-2\\\">\\n            <div class=\\\"card\\\" style=\\\"color: black; margin: 8px\\\" *ngFor=\\\"let order of orderColumnTwo\\\">\\n                    <div class=\\\"card-header\\\">\\n                      Order {{order.orderId}}  {{order.medicine}}\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                      <!--h5 class=\\\"card-title\\\">Special title treatment</h5-->\\n                      <p class=\\\"card-text\\\">Year : {{order.year}} <span style=\\\"float: right\\\">Month : {{months[order.month - 1]}}</span> </p>\\n                      <p class=\\\"card-text\\\">Quantity : {{order.quantity}} packs <span style=\\\"color: blue\\\" *ngIf=\\\"order.isPredicted\\\">(A predicted value)</span><span style=\\\"color: red\\\" *ngIf=\\\"!order.isPredicted\\\">(A custom value)</span></p>\\n                      <p class=\\\"card-text\\\" *ngIf=\\\"order.notes\\\">Notes : {{order.notes}} </p>\\n                    </div>\\n                  </div>\\n    </div>\\n\\n  </div>\\n</div>\\n\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29yZGVyL2NvbXBvbmVudHMvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { FormBuilder } from '@angular/forms';\nimport { OrderService } from 'src/app/services/order.service';\nimport { PredictionRequest } from 'src/app/models/prediction.request';\nimport { Router } from '@angular/router';\nimport { PredictionService } from 'src/app/services/prediction.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  predictSubscriber: Subscription;\n  predictedValue: number;\n  predictForm = this.formBuilder.group({\n    medicine: 'adorastatin',\n    year: 2021,\n    month: 1,\n    option: ['a'],\n  });\n  predictionSubscription: Subscription;\n  selectedMedicine;\n  selectedOption;\n\n  constructor(private formBuilder: FormBuilder, private predictionService: PredictionService, private router: Router) { }\n\n  ngOnInit() {\n  }\n\n  predict() {\n    this.selectedMedicine = this.predictForm.value.medicine;\n    this.selectedOption = this.predictForm.value.option[0];\n    const predictionRequest: PredictionRequest = {\n      medicine: this.predictForm.value.medicine,\n      year: this.predictForm.value.year,\n      month: this.predictForm.value.month,\n      withCovid: this.selectedOption == 'b' ? true : false,\n    };\n\n    this.predictionSubscription = this.predictionService.getPrediction(predictionRequest).subscribe(\n      data => {\n        if (data.success) {\n          this.predictedValue = parseFloat(data.prediction.toFixed(0));\n        } else {\n          alert('Prediction Failed, Please Try again');\n        }\n      },\n      error => {\n        console.log(error.message);\n      }\n    );\n  }\n\n  seeWhy() {\n    if (this.selectedMedicine) {\n      const medicine = this.selectedMedicine + '_' + this.selectedOption + '_' + this.predictedValue + '_' +this.predictForm.value.year + '_' + this.predictForm.value.month;\n      this.router.navigate(['/seewhy', medicine]);\n    } else {\n      alert('Please do a prediction first');\n    }\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29yZGVyL2NvbXBvbmVudHMvaGlzdG9yeS9oaXN0b3J5LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Order } from 'src/app/models/order';\nimport { OrderService } from 'src/app/services/order.service';\nimport { Subscription } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-history',\n  templateUrl: './history.component.html',\n  styleUrls: ['./history.component.css']\n})\nexport class HistoryComponent implements OnInit {\n  orders: Order[];\n  orderColumnOne: Order[];\n  orderColumnTwo: Order[];\n  ordersSubscription: Subscription;\n  months = ['Januray', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  searchForm = this.formBuilder.group({\n    medicine: 'adorastatin'\n  });\n\n  constructor(private orderService: OrderService, private formBuilder: FormBuilder) { }\n\n  ngOnInit() {\n    this.ordersSubscription = this.orderService.getOrderHistory().subscribe(\n      data => {\n        this.orders = data;\n        this.divideToOrderColumns(this.orders);\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  divideToOrderColumns(orders: Order[]){\n    this.orderColumnOne = [];\n    this.orderColumnTwo = [];\n\n    let appenedColumn = 1;\n    orders.forEach( order => {\n      if (appenedColumn == 1){\n        this.orderColumnTwo.push(order);\n        appenedColumn = 2;\n      } else {\n        this.orderColumnOne.push(order);\n        appenedColumn = 1;\n      }\n\n    });\n  }\n\n  search(){\n    const orders = this.orders;\n    this.orderColumnOne = [];\n    this.orderColumnTwo = [];\n    let appenedColumn = 1;\n    orders.forEach( order => {\n      if( order.medicine == this.searchForm.value.medicine.toUpperCase()){\n        if (appenedColumn == 1) {\n          this.orderColumnTwo.push(order);\n          appenedColumn = 2;\n        } else {\n          this.orderColumnOne.push(order);\n          appenedColumn = 1;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n   if(this.ordersSubscription){\n     this.ordersSubscription.unsubscribe();\n   }\n    \n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { HistoryComponent } from './components/history/history.component';\nimport { RouteGuardService } from '../services/guards/route.guard.service';\n\n\nconst routes: Routes = [\n  {path: '', component: DashboardComponent, canActivate: [RouteGuardService]},\n  {path: 'history', component: HistoryComponent, canActivate: [RouteGuardService]}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class OrderRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OrderRoutingModule } from './order-routing.module';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { HistoryComponent } from './components/history/history.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouteGuardService } from '../services/guards/route.guard.service';\n\n\n@NgModule({\n  declarations: [DashboardComponent, HistoryComponent],\n  imports: [\n    CommonModule,\n    OrderRoutingModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [RouteGuardService]\n})\nexport class OrderModule { }\n","import { Injectable } from '@angular/core';\nimport { PredictionRequest } from '../models/prediction.request';\nimport { PredictionResponse } from '../models/prediction.response';\nimport { Observable } from 'rxjs';\nimport { Paths } from '../paths';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PredictionService {\n\n  constructor(private http: HttpClient) { }\n\n  getPrediction(predictionRequest: PredictionRequest): Observable<PredictionResponse> {\n    const url = Paths.flaskAPIUrl + `/predict`;\n    return this.http.post<PredictionResponse>(url, predictionRequest);\n  }\n}\n"],"sourceRoot":"webpack:///"}